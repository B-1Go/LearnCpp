#include <iostream>

typedef struct _tagMyst()
{
	int a;
	folat b;
}MYST;



int main()
{
	int i = 0;
	int* pInt;

	pint = &i;

	*pint = 10; // 해당 포인터로 접근해서 10을 널어라 즉, 'i = 10;' 와 같다

	// 구조체와 포인터

	MYSY s = {};

	MYST* pST = &s; // 구조체 포인터 선언

	// 기본자료형 2개가 들어 있는 구조이므로 무엇을 가르키는지 정의 해줘야함

	(*pST).a = 10;
	(*pST).b = 3.14f;

	// 위 식을 축약하면

	pST->a = 10;
	pST->b = 3.14f;



	// 동적할당 및 가변자료형 구현할때 반드시 구조체 + 포인터 + 힙메모리(관리) 3가지 개념이 필요하다.
	


	// 힙메모리 할당 함수 (메모리의 주소를 넘겨주는 함수임)
	
	malloc(8); // 단위는 1바이트 즉, 8바이트 메모리를 할당함
	
	(int*)malloc(16); // malloc은 순순히 주소만 넘겨주므로 void함수이고 내가 어떻게 그 공간을 사용할지 정의해야 한다.

	int* pInt = (int*)malloc(sizeof(int) * 2);

	// 누수 메모리가 생기지 않게 해제도 반드시 해줘야한다.

	free(pInt);


	// 포인터의 덧셈 뺄셈의 개념
	int i = 0;
	pInt = &i;

	// 주소는 1바이트씩 부여된다.
	// 만약 pInt가 100번지라고 하면 4바이트 이므로 끝은 104번지가 된다.

	pInt += 1;
	// 포인터 변수의 +1은 단순히 100 + 1 = 101 이 되는게 아니라
	// 포인터 변수가 의미하는 크기에 다음 번지를 의미한다.
	// 따라서 pInt에 +1을 하면 104번지 즉, 4바이트씩 증가하게 된다.
	// 만약 char에 +1을 하면 1바이트씩, long long에 하면 8바이트씩 증가 한다.
	// 따라서 포인터 변수 증감은 그 자료형 크기에 따라서 왔다 갔다 한다.

	// pInt 는 int* 변수 이기 때문에, 가리키는 곳은 int로 해석한다.
	// 따라서 주소값을 1 증가하는 의미는 다음 int 위치로 접근하기 위해서 sizeof(int) 단위로	증가하게 된다.



	// 레퍼런스
	// 자료형 * 변수명;   포인터 변수 선언
	// *포인터변수;       포인터로 주소 역참조
	// &변수;             변수의 주소값
	// 자료형 & 변수명;   레퍼런스 변수 선언

	// c++ 에 추가된 기능
	// 포인터와 유사
	// 원본을 참조한다.
	// 참조변수를 통해서 직접적으로 원본을 수정 할 수 있다.

	// C스타일
	int* pInt;
	pInt = (int*)malloc(sizeof(int)*8);
	free(pInt);

	// Cpp스타일 위와 완전히 동일
	int* pInt;
	pInt = new int[2];
	delete pInt;

	return 0;
}